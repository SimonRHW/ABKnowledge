/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]

ext.newsRunAlone = "${newsRunAlone}".toBoolean()
ext.accountRunAlone = "${accountRunAlone}".toBoolean()
ext.newFeaturesRunAlone = "${newFeaturesRunAlone}".toBoolean()
ext.homeRunAlone = "${homeRunAlone}".toBoolean()
ext.contentRunAlone = "${contentRunAlone}".toBoolean()
ext.mineRunAlone = "${mineRunAlone}".toBoolean()
ext.animationRunAlone = "${animationRunAlone}".toBoolean()

def versions = [:]
versions.android_gradle_plugin = '4.1.3'

versions.asm = '8.0'

versions.activity = '1.1.0'
versions.annotations = "1.0.0"
versions.appcompat = "1.2.0"
versions.arch_core = "2.1.0"
versions.asynclayoutinflater = "1.1.0"

versions.atsl_core = "1.2.0"
versions.atsl_junit = "1.1.1"
versions.atsl_rules = "1.2.0"
versions.atsl_runner = "1.2.0"

versions.benchmark = "1.0.0"
versions.biometric = "1.0.1"
versions.browser = "1.2.0"

versions.cameraX = "1.0.0-rc01"
versions.cardview = "1.0.0"
versions.constraint_layout = "2.0.4"
versions.coordinator_layout = "1.1.0"
versions.core = "1.3.1"
versions.customview = "1.0.0"
versions.coroutines = "1.4.2"

versions.drawerlayout = "1.1.1"
versions.dagger = "2.16"
versions.dexmaker = "2.2.0"
versions.espresso = "3.2.0"

versions.fragment = "1.2.5"

versions.gson = "2.8.6"
versions.glide = "4.11.0"
versions.glide = "4.11.0"

versions.hamcrest = "1.3"
versions.hilt = "2.33-beta"
versions.hilt_androidx = "1.0.0-alpha01"

versions.junit = "4.12"
versions.jacoco = "0.8.5"

versions.kotlin = "1.4.32"

versions.lifecycle = "2.3.1"

versions.material = "1.2.1"

versions.mockito = "2.25.0"
versions.mockito_all = "1.10.19"
versions.mockito_android = "2.25.0"
versions.mockwebserver = "3.8.1"

versions.navigation = "2.3.2"

versions.okhttp = "4.4.1"

versions.paging = "2.1.2"
versions.preference = "1.1.1"

versions.recyclerview = "1.2.0-beta01"
versions.retrofit = "2.7.2"
versions.robolectric = "4.2"
versions.room = "2.2.6"
versions.rx_android = "2.1.1"
versions.rxjava2 = "2.2.12"

versions.sonar = "2.7.1"
versions.slice = "1.1.0-alpha01"
versions.startup = ":1.0.0"
versions.swagger = "1.5.15"
versions.swiperefreshlayout = "1.1.0"

versions.timber = "4.7.1"
versions.transition = "1.3.0"
versions.truth = "1.0.1"
versions.truth = "1.0.1"

versions.ViewPager2 = "1.0.0"

versions.work = "2.4.0"
versions.webkit = "1.3.0"

versions.xlog = "1.2.5"

versions.zxing = "3.3.3"

ext.versions = versions

def build_versions = [:]
build_versions.min_sdk = 21
build_versions.compile_sdk = 29
build_versions.target_sdk = 29
build_versions.build_tools = "29.0.3"
ext.build_versions = build_versions

ext.javaVersion = JavaVersion.VERSION_1_8

def deps = [:]

//ASM依赖
def asm = [:]
asm.runtime = "org.ow2.asm:asm:$versions.asm"
asm.util = "org.ow2.asm:asm-util:$versions.asm"
asm.commons = "org.ow2.asm:asm-commons:$versions.asm"
deps.asm = asm

def activity = [:]
activity.activity_ktx = "androidx.activity:activity-ktx:$versions.activity"
deps.activity = activity

deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"
deps.android_gradle_plugin_api = "com.android.tools.build:gradle-api:$versions.android_gradle_plugin"

deps.annotations = "androidx.annotation:annotation:$versions.annotations"

deps.app_compat = "androidx.appcompat:appcompat:$versions.appcompat"

//View
deps.cardview = "androidx.cardview:cardview:$versions.cardview"
deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
deps.coordinator_layout = "androidx.coordinatorlayout:coordinatorlayout:$versions.coordinator_layout"
deps.customview = "androidx.customview:customview:$versions.customview"
deps.drawerlayout = "androidx.drawerlayout:drawerlayout:$versions.drawerlayout"
deps.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"
deps.viewpager2 = "androidx.viewpager2:viewpager2:$versions.viewpager2"

deps.asynclayoutinflater = "androidx.asynclayoutinflater:asynclayoutinflater:$versions.asynclayoutinflater"

def arch_core = [:]
arch_core.runtime = "androidx.arch.core:core-runtime:$versions.arch_core"
arch_core.testing = "androidx.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core

def arouter = [:]
arouter.api = "com.alibaba:arouter-api:1.5.0"
arouter.compiler = "com.alibaba:arouter-compiler:1.2.2"
arouter.register = "com.alibaba:arouter-register:1.0.2"
deps.arouter = arouter

def atsl = [:]
atsl.core = "androidx.test:core:$versions.atsl_core"
atsl.ext_junit = "androidx.test.ext:junit:$versions.atsl_junit"
atsl.runner = "androidx.test:runner:$versions.atsl_runner"
atsl.rules = "androidx.test:rules:$versions.atsl_rules"
deps.atsl = atsl

deps.benchmark = "androidx.benchmark:benchmark-junit4:$versions.benchmark"
deps.benchmark_gradle = "androidx.benchmark:benchmark-gradle-plugin:$versions.benchmark"
deps.biometric = "androidx.biometric:biometric:$versions.biometric"
deps.browser = "androidx.browser:browser:$versions.browser"

def cameraX = [:]
cameraX.camera2 = "androidx.camera:camera-camera2:$versions.cameraX "
// If you want to additionally use the CameraX Lifecycle library
cameraX.lifecycle = "androidx.camera:camera-lifecycle:$versions.cameraX"
// If you want to additionally use the CameraX View class
cameraX.view = "androidx.camera:camera-view:1.0.0-alpha10"
// If you want to additionally use the CameraX Extensions library
cameraX.extensions = "androidx.camera:camera-extensions:1.0.0-alpha10"

// Java language implementation
deps.core = "androidx.core:core:$versions.core"
deps.core_ktx = "androidx.core:core-ktx:$versions.core"

def coroutines = [:]
coroutines.runtime = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.coroutines"
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
coroutines.test = "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
deps.coroutines = coroutines

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def fragment = [:]
fragment.runtime = "androidx.fragment:fragment:${versions.fragment}"
fragment.runtime_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}"
fragment.testing = "androidx.fragment:fragment-testing:${versions.fragment}"
deps.fragment = fragment

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
glide.integration = "com.github.bumptech.glide:okhttp3-integration:$versions.glide"
deps.glide = glide

deps.gson = "com.google.code.gson:gson:$versions.gson"

deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"

def hilt = [:]
hilt.plugin = "com.google.dagger:hilt-android-gradle-plugin:$versions.hilt"
hilt.runtime = "com.google.dagger:hilt-android:$versions.hilt"
hilt.compiler = "com.google.dagger:hilt-compiler:$versions.hilt"

hilt.jetpack_navigation = "androidx.hilt:hilt-navigation-fragment:$versions.hilt_androidx "
hilt.jetpack_work = "androidx.hilt:hilt-work:$versions.hilt_androidx"
hilt.jetpack_androidx_compiler = "androidx.hilt:hilt-compiler:$versions.hilt_androidx"
hilt.jetpack_lifecycle_viewmodel = "androidx.hilt:hilt-lifecycle-viewmodel:$versions.hilt_androidx"
hilt.kapt_android_compiler = "androidx.hilt:hilt-compiler:$versions.hilt_androidx"

// For Robolectric tests.
hilt.test = "com.google.dagger:hilt-android-testing:$versions.hilt"
hilt.kapt_test = "com.google.dagger:hilt-android-compiler:$versions.hilt"

// For instrumented tests.
hilt.android_test = "com.google.dagger:hilt-android-testing:$versions.hilt"
hilt.kapt_android_test = "com.google.dagger:hilt-android-compiler:$versions.hilt"
deps.hilt = hilt

deps.jacoco = "org.jacoco:org.jacoco.core:$versions.jacoco"

deps.junit = "junit:junit:$versions.junit"

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
deps.kotlin = kotlin

def lifecycle = [:]
// ViewModel
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
// LiveData
lifecycle.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
// Lifecycles only (without ViewModel or LiveData)
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime-ktx:$versions.lifecycle"
// Saved state module for ViewModel
lifecycle.viewmodel_ktx_savedstate = "androidx.lifecycle:lifecycle-viewmodel-savedstate:$versions.lifecycle"
// Annotation processor
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
// Jetpack Compose Integration for ViewModel
lifecycle.viewmodel_compose = "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha04"
// Annotation processor
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
// alternately - if using Java8, use the following instead of lifecycle-compiler
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
// optional - helpers for implementing LifecycleOwner in a Service
lifecycle.service = "androidx.lifecycle:lifecycle-service:$versions.lifecycle"
// optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
lifecycle.process = "androidx.lifecycle:lifecycle-process:$versions.lifecycle"
// optional - ReactiveStreams support for LiveData
lifecycle.reactivestreams = "androidx.lifecycle:lifecycle-reactivestreams-ktx:$versions.lifecycle"
deps.lifecycle = lifecycle

deps.material = "com.google.android.material:material:$versions.material"

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito_android"
deps.mockito = mockito

deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.testing = "androidx.navigation:navigation-testing:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
deps.navigation = navigation

def okhttp = [:]
okhttp.runtime = "com.squareup.okhttp3:okhttp:$versions.okhttp"
okhttp.logging = "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"
deps.okhttp = okhttp

def paging = [:]
paging.runtime = "androidx.paging:paging-runtime-ktx:$versions.paging"
paging.common = "androidx.paging:paging-common-ktx:$versions.paging"
paging.rxjava = "androidx.paging:paging-rxjava2-ktx:$versions.paging"
deps.paging = paging

deps.preference = "androidx.preference:preference:$versions.preference"

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.rxjava = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"
retrofit.coroutines = 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
deps.retrofit = retrofit

deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
deps.room = room

deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"

deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"

deps.slice = "androidx.slice:slice-core:$versions.slice"

deps.startup = "androidx.startup:startup-runtime:$versions.startup"

deps.swagger = "io.swagger:swagger-annotations:$versions.swagger"

deps.swiperefreshlayout = "androidx.swiperefreshlayout:swiperefreshlayout:$versions.swiperefreshlayout"

deps.sonar = "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$versions.sonar"

deps.timber = "com.jakewharton.timber:timber:$versions.timber"
deps.transition = "androidx.transition:transition:$versions.transition"
deps.truth = "com.google.truth:truth:$versions.truth"

def work = [:]
work.runtime = "androidx.work:work-runtime:$versions.work"
work.testing = "androidx.work:work-testing:$versions.work"
work.firebase = "androidx.work:work-firebase:$versions.work"
work.runtime_ktx = "androidx.work:work-runtime-ktx:$versions.work"
deps.work = work

deps.webkit = "androidx.webkit:webkit:$versions.webkit"

deps.xlog = "com.tencent.mars:mars-xlog:$versions.xlog"

deps.zxing = "com.google.zxing:core:$versions.zxing"

ext.deps = deps

static def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url "https://plugins.gradle.org/m2/" }
    handler.maven { url 'https://maven.aliyun.com/repository/google' }
    handler.maven { url 'https://maven.aliyun.com/repository/public' }
    handler.maven { url 'https://maven.aliyun.com/repository/central' }
    handler.maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
    handler.maven { url 'https://mirrors.huaweicloud.com/repository/maven/' }
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    handler.maven { url "../ABKnowledge/repo" }
}

ext.addRepos = this.&addRepos
