import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'dagger.hilt.android.plugin'
//apply plugin: 'simon.asm.plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply from: "$project.rootDir/jacoco.gradle"

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

static def versionTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

static String getDate() {
    return new SimpleDateFormat("MMddHHmm", Locale.CHINA).format( Date())
}

static def getGitVersion() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

android {

    compileSdkVersion build_versions.compile_sdk
    buildToolsVersion build_versions.build_tools
    defaultConfig {
        applicationId "com.simon.basic.knowledge"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk

        versionCode project.VERSIONCODE as int
        versionName project.VERSIONNAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        buildConfigField("String", "GIT_VERSION", "\"${getGitVersion()}\"")
        manifestPlaceholders = [
                SHARED_USER_ID_VALUE: "com.simon"
        ]
    }

    // The default value for each feature is shown below. You can change the value to
    // override the default behavior.
    buildFeatures {
        // Determines whether to generate a BuildConfig class.
        //buildConfig = true
        // Determines whether to support View Binding.
        // Note that the viewBinding.enabled property is now deprecated.
        viewBinding = true
        // Determines whether to support Data Binding.
        // Note that the dataBinding.enabled property is now deprecated.
        dataBinding = true
        // Determines whether to generate binder classes for your AIDL files.
        // aidl = true
        // Determines whether to support RenderScript.
        //renderScript = true
        // Determines whether to support injecting custom variables into the module’s R class.
        //resValues = true
        // Determines whether to support shader AOT compilation.
        //shaders = true
    }

    androidExtensions {
        experimental = true
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    signingConfigs {
        release {
            keyAlias project.KEY_ALIAS
            keyPassword project.KEY_PASSWORD
            storeFile file(project.STORE_FILE)
            storePassword project.STORE_PASSWORD
        }
        debug {
            keyAlias project.KEY_ALIAS
            keyPassword project.KEY_PASSWORD
            storeFile file(project.STORE_FILE)
            storePassword project.STORE_PASSWORD
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = variant.productFlavors[0].name + "_" +
                    applicationId + "_" + variant.buildType.name + "_v" +
                    defaultConfig.versionName + "_" + versionTime() + ".apk"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            testCoverageEnabled true
        }

        release {
            debuggable false
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions('platform', 'environment', 'channel')

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {

        //普通版
        general {
            dimension "platform"
            manifestPlaceholders = [
                    APP_NAME: "@string/app_name",
                    APP_ICON: "@mipmap/ic_launcher",
            ]
        }

        //特殊版
        special {
            dimension "platform"
            manifestPlaceholders = [
                    APP_NAME: "@string/app_name",
                    APP_ICON: "@mipmap/ic_launcher",
            ]
        }

        //联测、开发环境
        dev {
            dimension "environment"
            buildConfigField("String", "host", "\"https://dev.com/\"")
        }

        //测试环境
        uat {
            dimension "environment"
            buildConfigField("String", "host", "\"https://uat.com/\"")
        }

        //预发布环境
        beta {
            dimension "environment"
            buildConfigField("String", "host", "\"https://beta.com/\"")
        }

        //生产环境
        production {
            dimension "environment"
            buildConfigField("String", "host", "\"https://production.com/\"")
        }

        xiaomi {
            dimension "channel"
            manifestPlaceholders = [CHANNEL: "xiaomi"]
        }
        huawei {
            dimension "channel"
            manifestPlaceholders = [CHANNEL: "huawei"]
        }
        oppo {
            dimension "channel"
            manifestPlaceholders = [CHANNEL: "oppo"]
        }
        vivo {
            dimension "channel"
            manifestPlaceholders = [CHANNEL: "vivo"]
        }
        yingyongbao {
            dimension "channel"
            manifestPlaceholders = [CHANNEL: "yingyongbao"]
        }
    }

    testOptions {
        unitTests {
            compileSdkVersion build_versions.compile_sdk
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
            systemProperty 'robolectric.enabledSdks', build_versions.compile_sdk
            jvmArgs '-noverify'
        }

    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.javaVersion
    }

    lintOptions {
        abortOnError false
        disable 'GoogleAppIndexingWarning'
    }

}

realm {
    syncEnabled = true
}

repositories {
    //与 implementation fileTree(dir: 'libs', include: ['*.jar']) 互斥 ，不同平台进行不同版本lib集成
    flatDir {
        dirs "libs"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs')
    implementation project(':logLib')
    implementation project(':basecore')
    implementation project(':imagecore')
    implementation project(':netcore')
    implementation project(':modulemanager')

    if (!rootProject.ext.newsRunAlone) {
        implementation project(path: ':module-news')
    }

    if (!rootProject.ext.animationRunAlone) {
        implementation project(path: ':module-animation')
    }

    implementation deps.material
    implementation deps.constraint_layout

    // Navigation
    implementation deps.navigation.runtime_ktx
    implementation deps.navigation.fragment_ktx
    implementation deps.navigation.ui_ktx

    //Kotlin
    implementation deps.kotlin.stdlib

    //ARouter
    implementation deps.arouter.api
    kapt deps.arouter.compiler

    //Hilt
    implementation deps.hilt.runtime
    kapt deps.hilt.compiler

    // Firebase Analytics & Crash reporting
    implementation 'com.google.firebase:firebase-core:18.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.3.0'
    implementation 'com.google.firebase:firebase-analytics:18.0.1'

    testImplementation deps.junit
    testImplementation deps.arch_core.testing

    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules
    androidTestImplementation deps.atsl.ext_junit
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib
    androidTestImplementation deps.arch_core.testing
}
